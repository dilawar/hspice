module Jeera.Skel where

-- Haskell module generated by the BNF converter

import Jeera.Abs
import Jeera.ErrM
type Result = Err String

failure :: Show a => a -> Result
failure x = Bad $ "Undefined case: " ++ show x

transIdent :: Ident -> Result
transIdent x = case x of
  Ident str  -> failure x


transDesign :: Design -> Result
transDesign x = case x of
  Design devicedecls  -> failure x


transDeviceDecl :: DeviceDecl -> Result
transDeviceDecl x = case x of
  DeviceDecl instancename devicetype assignments  -> failure x


transDeviceType :: DeviceType -> Result
transDeviceType x = case x of
  DeviceType_Resistor  -> failure x
  DeviceType_Capacitor  -> failure x
  DeviceType_Inductance  -> failure x
  DeviceType_Voltage  -> failure x


transInstanceName :: InstanceName -> Result
transInstanceName x = case x of
  InstanceName id  -> failure x


transAssignment :: Assignment -> Result
transAssignment x = case x of
  Assignment id rvalue  -> failure x


transRvalue :: Rvalue -> Result
transRvalue x = case x of
  RvalueIdent id  -> failure x
  RvalueDouble d  -> failure x
  RvalueInteger n  -> failure x




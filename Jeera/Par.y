-- This Happy file was machine-generated by the BNF converter
{
{-# OPTIONS_GHC -fno-warn-incomplete-patterns -fno-warn-overlapping-patterns #-}
module Jeera.Par where
import Jeera.Abs
import Jeera.Lex
import Jeera.ErrM

}

%name pDesign Design

-- no lexer declaration
%monad { Err } { thenM } { returnM }
%tokentype { Token }

%token 
 ',' { PT _ (TS _ 1) }
 ';' { PT _ (TS _ 2) }
 '=' { PT _ (TS _ 3) }
 'Capacitor' { PT _ (TS _ 4) }
 'Inductance' { PT _ (TS _ 5) }
 'Resistor' { PT _ (TS _ 6) }
 'Voltage' { PT _ (TS _ 7) }
 '{' { PT _ (TS _ 8) }
 '}' { PT _ (TS _ 9) }

L_ident  { PT _ (TV $$) }
L_doubl  { PT _ (TD $$) }
L_integ  { PT _ (TI $$) }
L_err    { _ }


%%

Ident   :: { Ident }   : L_ident  { Ident $1 }
Double  :: { Double }  : L_doubl  { (read ( $1)) :: Double }
Integer :: { Integer } : L_integ  { (read ( $1)) :: Integer }

Design :: { Design }
Design : ListDeviceDecl { Design $1 } 


DeviceDecl :: { DeviceDecl }
DeviceDecl : InstanceName '=' DeviceType '{' ListAssignment '}' { DeviceDecl $1 $3 $5 } 


ListDeviceDecl :: { [DeviceDecl] }
ListDeviceDecl : DeviceDecl ';' { (:[]) $1 } 
  | DeviceDecl ';' ListDeviceDecl { (:) $1 $3 }


DeviceType :: { DeviceType }
DeviceType : 'Resistor' { DeviceType_Resistor } 
  | 'Capacitor' { DeviceType_Capacitor }
  | 'Inductance' { DeviceType_Inductance }
  | 'Voltage' { DeviceType_Voltage }


InstanceName :: { InstanceName }
InstanceName : Ident { InstanceName $1 } 


Assignment :: { Assignment }
Assignment : Ident '=' Rvalue { Assignment $1 $3 } 


ListAssignment :: { [Assignment] }
ListAssignment : Assignment { (:[]) $1 } 
  | Assignment ',' ListAssignment { (:) $1 $3 }


Rvalue :: { Rvalue }
Rvalue : Ident { RvalueIdent $1 } 
  | Double { RvalueDouble $1 }
  | Ident { RvalueIdent $1 }
  | Integer { RvalueInteger $1 }



{

returnM :: a -> Err a
returnM = return

thenM :: Err a -> (a -> Err b) -> Err b
thenM = (>>=)

happyError :: [Token] -> Err a
happyError ts =
  Bad $ "syntax error at " ++ tokenPos ts ++ 
  case ts of
    [] -> []
    [Err _] -> " due to lexer error"
    _ -> " before " ++ unwords (map (id . prToken) (take 4 ts))

myLexer = tokens
}


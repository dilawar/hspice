module Jeera.Abs where

-- Haskell module generated by the BNF converter


newtype Ident = Ident String deriving (Eq,Ord,Show)
data Program =
   Program [Statement]
  deriving (Eq,Ord,Show)

data Statement =
   DeviceDecl DeviceDecl
  deriving (Eq,Ord,Show)

data DeviceDecl =
   SimpleDevice InstanceName SimpleDeviceType [DeviceStatement]
 | TwoPortDevice InstanceName [DeviceStatement]
  deriving (Eq,Ord,Show)

data SimpleDeviceType =
   Resistor
 | Inductor
 | Capacitor
  deriving (Eq,Ord,Show)

data DeviceStatement =
   DeviceStatement LHSExpression RHSExpression
  deriving (Eq,Ord,Show)

data LHSExpression =
   LHSExpressionValueExpression ValueExpression
 | LHSExpressionFunctionExpression FunctionExpression
 | LHSExpressionInOutPortVariable InOutPortVariable
 | LHSExpressionIdent Ident
  deriving (Eq,Ord,Show)

data FunctionExpression =
   FunctionExpression Ident Ident
  deriving (Eq,Ord,Show)

data ValueExpression =
   ValueExpression
  deriving (Eq,Ord,Show)

data InOutPortVariable =
   InputVariable
 | OutputVariable
  deriving (Eq,Ord,Show)

data RHSExpression =
   RHSExpressionSimpleExpression SimpleExpression
 | RHSExpressionFunctionExpression FunctionExpression
 | RHSExpressionMathExpression MathExpression
 | RHSExpressionExpression Expression
  deriving (Eq,Ord,Show)

data SimpleExpression =
   ExpressionDouble Double
 | ExpressionInteger Integer
  deriving (Eq,Ord,Show)

data Expression =
   PortExpr PortExpression
 | MathExpr MathExpression
 | NumericExpr NumericExpression
  deriving (Eq,Ord,Show)

data NumericExpression =
   NumericExpressionInteger Integer
 | NumericExpressionDouble Double
  deriving (Eq,Ord,Show)

data PortExpression =
   PortExpression PortName PortName
  deriving (Eq,Ord,Show)

data MathExpression =
   MathExpression_1 RHSExpression RHSExpression
 | MathExpression_2 RHSExpression RHSExpression
 | MathExpression_3 RHSExpression RHSExpression
 | MathExpression_4 RHSExpression RHSExpression
 | MathExpression_5 MathExpression
 | MathExpressionIdent Ident
  deriving (Eq,Ord,Show)

data InstanceName =
   InstanceName Ident
  deriving (Eq,Ord,Show)

data PortName =
   PortNameIdent Ident
 | PortNameInteger Integer
  deriving (Eq,Ord,Show)


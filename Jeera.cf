{- This is BNF grammar -}
entrypoints Program;

-- Program is made of one or more statements. They all terminate by character ;.
Program. Program ::= [Statement];
terminator nonempty Statement ";";

{- We have two type of statements in this langauge: DeviceDecl and Connection.
DeviceDecl declares a device while Connection specifies the wires connecting two
or more Devices.
-}

DeviceDecl. Statement ::= DeviceDecl;
-- Connection. Statement ::= Connection;

{- Generic device is the two port device. There are various types of Devices:
resistor, inductor, capacitor, etc. 
-}

Device. DeviceDecl ::= InstanceName "=" DeviceType "{" [DeviceStatement] "}";

-- Device types
Resistor. DeviceType ::= "Resistor";
Inductor. DeviceType ::= "Inductor";
Capacitor. DeviceType ::= "Capacitor";
VSource. DeviceType ::= "VSource";
ISource. DeviceType ::= "ISource";
GenericDevice. DeviceType ::= "Device";


{- DeviceStatement 
Each device must have input and output ports. If not given then generate them
while inserting them into network. If device is GenericDevice, then we should
also have input output relation.
-}
PortDeclaration. DeviceStatement ::= PortDirection [PortName];
ValueExpr. DeviceStatement ::= "value" "=" RHSDeviceExpr;
ParameterAssignmentExpr. DeviceStatement ::= "param" ParameterName "=" RHSDeviceExpr;
InitialConditionExpr. DeviceStatement ::=  "init" ParameterName "=" RHSDeviceExpr;
PortRelation. DeviceStatement ::= FunctionOnPort "(" PortName ")" "=" RHSDeviceExpr;
terminator nonempty DeviceStatement ";";

PortRelationExpr. PortRelationExpr ::= FunctionOnPort "(" PortName ")";
InputPort. PortDirection ::= "in";
OutputPort. PortDirection ::= "out";

-- Function on ports
rules FunctionOnPort ::= "V" | "I";

-- ParameterName 
ParameterName. ParameterName ::= Ident;

rules RHSDeviceExpr ::= SimpleExpr 
    | PortRelationExpr
    | MathExpr
    | Expr 
    ;

ExprDouble. SimpleExpr ::= Double;
ExprInteger. SimpleExpr ::= Integer;


MathExpr. Expr ::= MathExpr;
NumericExpr. Expr ::= NumericExpr;
rules NumericExpr ::= Integer 
    | Double 
    ;

PortExpr. PortExpr ::= "(" PortName "," PortName ")";

rules MathExpr ::=  RHSDeviceExpr  "*" RHSDeviceExpr 
        | RHSDeviceExpr "+" RHSDeviceExpr 
        | RHSDeviceExpr "/" RHSDeviceExpr 
        | RHSDeviceExpr "-" RHSDeviceExpr
        | "(" MathExpr ")"
        | Ident
        ;


-- Instance name 
InstanceName. InstanceName ::= Ident;

-- Port name
rules PortName ::= Ident | Integer;
separator nonempty PortName ",";

-- comments 
comment "//";
comment "/*" "*/";

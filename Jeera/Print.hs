{-# OPTIONS_GHC -fno-warn-incomplete-patterns #-}
module Jeera.Print where

-- pretty-printer generated by the BNF converter

import Jeera.Abs
import Data.Char


-- the top-level printing method
printTree :: Print a => a -> String
printTree = render . prt 0

type Doc = [ShowS] -> [ShowS]

doc :: ShowS -> Doc
doc = (:)

render :: Doc -> String
render d = rend 0 (map ($ "") $ d []) "" where
  rend i ss = case ss of
    "["      :ts -> showChar '[' . rend i ts
    "("      :ts -> showChar '(' . rend i ts
    "{"      :ts -> showChar '{' . new (i+1) . rend (i+1) ts
    "}" : ";":ts -> new (i-1) . space "}" . showChar ';' . new (i-1) . rend (i-1) ts
    "}"      :ts -> new (i-1) . showChar '}' . new (i-1) . rend (i-1) ts
    ";"      :ts -> showChar ';' . new i . rend i ts
    t  : "," :ts -> showString t . space "," . rend i ts
    t  : ")" :ts -> showString t . showChar ')' . rend i ts
    t  : "]" :ts -> showString t . showChar ']' . rend i ts
    t        :ts -> space t . rend i ts
    _            -> id
  new i   = showChar '\n' . replicateS (2*i) (showChar ' ') . dropWhile isSpace
  space t = showString t . (\s -> if null s then "" else (' ':s))

parenth :: Doc -> Doc
parenth ss = doc (showChar '(') . ss . doc (showChar ')')

concatS :: [ShowS] -> ShowS
concatS = foldr (.) id

concatD :: [Doc] -> Doc
concatD = foldr (.) id

replicateS :: Int -> ShowS -> ShowS
replicateS n f = concatS (replicate n f)

-- the printer class does the job
class Print a where
  prt :: Int -> a -> Doc
  prtList :: [a] -> Doc
  prtList = concatD . map (prt 0)

instance Print a => Print [a] where
  prt _ = prtList

instance Print Char where
  prt _ s = doc (showChar '\'' . mkEsc '\'' s . showChar '\'')
  prtList s = doc (showChar '"' . concatS (map (mkEsc '"') s) . showChar '"')

mkEsc :: Char -> Char -> ShowS
mkEsc q s = case s of
  _ | s == q -> showChar '\\' . showChar s
  '\\'-> showString "\\\\"
  '\n' -> showString "\\n"
  '\t' -> showString "\\t"
  _ -> showChar s

prPrec :: Int -> Int -> Doc -> Doc
prPrec i j = if j<i then parenth else id


instance Print Integer where
  prt _ x = doc (shows x)


instance Print Double where
  prt _ x = doc (shows x)


instance Print Ident where
  prt _ (Ident i) = doc (showString ( i))



instance Print Program where
  prt i e = case e of
   Program statements -> prPrec i 0 (concatD [prt 0 statements])


instance Print Statement where
  prt i e = case e of
   DeviceDecl devicedecl -> prPrec i 0 (concatD [prt 0 devicedecl])

  prtList es = case es of
   [x] -> (concatD [prt 0 x , doc (showString ";")])
   x:xs -> (concatD [prt 0 x , doc (showString ";") , prt 0 xs])

instance Print DeviceDecl where
  prt i e = case e of
   Device instancename devicetype devicestatements -> prPrec i 0 (concatD [prt 0 instancename , doc (showString "=") , prt 0 devicetype , doc (showString "{") , prt 0 devicestatements , doc (showString "}")])


instance Print DeviceType where
  prt i e = case e of
   Resistor  -> prPrec i 0 (concatD [doc (showString "Resistor")])
   Inductor  -> prPrec i 0 (concatD [doc (showString "Inductor")])
   Capacitor  -> prPrec i 0 (concatD [doc (showString "Capacitor")])
   VSource  -> prPrec i 0 (concatD [doc (showString "VSource")])
   ISource  -> prPrec i 0 (concatD [doc (showString "ISource")])
   GenericDevice  -> prPrec i 0 (concatD [doc (showString "Device")])


instance Print DeviceStatement where
  prt i e = case e of
   PortDeclaration portdirection portnames -> prPrec i 0 (concatD [prt 0 portdirection , prt 0 portnames])
   ValueExpr rhsdeviceexpr -> prPrec i 0 (concatD [doc (showString "value") , doc (showString "=") , prt 0 rhsdeviceexpr])
   ParameterAssignmentExpr parametername rhsdeviceexpr -> prPrec i 0 (concatD [doc (showString "param") , prt 0 parametername , doc (showString "=") , prt 0 rhsdeviceexpr])
   InitialConditionExpr parametername rhsdeviceexpr -> prPrec i 0 (concatD [doc (showString "init") , prt 0 parametername , doc (showString "=") , prt 0 rhsdeviceexpr])
   PortRelation functiononport portname rhsdeviceexpr -> prPrec i 0 (concatD [prt 0 functiononport , doc (showString "(") , prt 0 portname , doc (showString ")") , doc (showString "=") , prt 0 rhsdeviceexpr])

  prtList es = case es of
   [x] -> (concatD [prt 0 x , doc (showString ";")])
   x:xs -> (concatD [prt 0 x , doc (showString ";") , prt 0 xs])

instance Print PortRelationExpr where
  prt i e = case e of
   PortRelationExpr functiononport portname -> prPrec i 0 (concatD [prt 0 functiononport , doc (showString "(") , prt 0 portname , doc (showString ")")])


instance Print PortDirection where
  prt i e = case e of
   InputPort  -> prPrec i 0 (concatD [doc (showString "in")])
   OutputPort  -> prPrec i 0 (concatD [doc (showString "out")])


instance Print FunctionOnPort where
  prt i e = case e of
   FunctionOnPort_V  -> prPrec i 0 (concatD [doc (showString "V")])
   FunctionOnPort_I  -> prPrec i 0 (concatD [doc (showString "I")])


instance Print ParameterName where
  prt i e = case e of
   ParameterName id -> prPrec i 0 (concatD [prt 0 id])


instance Print RHSDeviceExpr where
  prt i e = case e of
   RHSDeviceExprSimpleExpr simpleexpr -> prPrec i 0 (concatD [prt 0 simpleexpr])
   RHSDeviceExprPortRelationExpr portrelationexpr -> prPrec i 0 (concatD [prt 0 portrelationexpr])
   RHSDeviceExprMathExpr mathexpr -> prPrec i 0 (concatD [prt 0 mathexpr])
   RHSDeviceExprExpr expr -> prPrec i 0 (concatD [prt 0 expr])


instance Print SimpleExpr where
  prt i e = case e of
   ExprDouble d -> prPrec i 0 (concatD [prt 0 d])
   ExprInteger n -> prPrec i 0 (concatD [prt 0 n])


instance Print Expr where
  prt i e = case e of
   MathExpr mathexpr -> prPrec i 0 (concatD [prt 0 mathexpr])
   NumericExpr numericexpr -> prPrec i 0 (concatD [prt 0 numericexpr])


instance Print NumericExpr where
  prt i e = case e of
   NumericExprInteger n -> prPrec i 0 (concatD [prt 0 n])
   NumericExprDouble d -> prPrec i 0 (concatD [prt 0 d])


instance Print MathExpr where
  prt i e = case e of
   MathExpr_1 rhsdeviceexpr0 rhsdeviceexpr -> prPrec i 0 (concatD [prt 0 rhsdeviceexpr0 , doc (showString "*") , prt 0 rhsdeviceexpr])
   MathExpr_2 rhsdeviceexpr0 rhsdeviceexpr -> prPrec i 0 (concatD [prt 0 rhsdeviceexpr0 , doc (showString "+") , prt 0 rhsdeviceexpr])
   MathExpr_3 rhsdeviceexpr0 rhsdeviceexpr -> prPrec i 0 (concatD [prt 0 rhsdeviceexpr0 , doc (showString "/") , prt 0 rhsdeviceexpr])
   MathExpr_4 rhsdeviceexpr0 rhsdeviceexpr -> prPrec i 0 (concatD [prt 0 rhsdeviceexpr0 , doc (showString "-") , prt 0 rhsdeviceexpr])
   MathExpr_5 mathexpr -> prPrec i 0 (concatD [doc (showString "(") , prt 0 mathexpr , doc (showString ")")])
   MathExprIdent id -> prPrec i 0 (concatD [prt 0 id])


instance Print InstanceName where
  prt i e = case e of
   InstanceName id -> prPrec i 0 (concatD [prt 0 id])


instance Print PortName where
  prt i e = case e of
   PortNameIdent id -> prPrec i 0 (concatD [prt 0 id])
   PortNameInteger n -> prPrec i 0 (concatD [prt 0 n])

  prtList es = case es of
   [x] -> (concatD [prt 0 x])
   x:xs -> (concatD [prt 0 x , doc (showString ",") , prt 0 xs])



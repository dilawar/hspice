{- This is BNF grammar -}
entrypoints Design;

Design. Design ::= [DesignStatement] ;
DesignStatement. DesignStatement ::= DeviceDecl;
terminator nonempty DesignStatement ";";

SimpleDevice. DeviceDecl ::= InstanceName "=" SimpleDeviceExpr ";";
TwoPortDevice. DeviceDecl ::= InstanceName "=" TwoPortDeviceExpr ";";

SimpleDeviceExpr. SimpleDeviceExpr ::= DeviceType "{" [DeviceStatement] "}" ;

rules DeviceType ::= "Resistor" | "Capacitor" | "Inductance" | "Voltage";

-- generic two-port device 
TwoPortDeviceExpr. TwoPortDeviceExpr ::= "Device" "{" [DeviceStatement] "}";

-- Device statements 
rules DeviceStatement ::= InputOutputExpression | DeviceExpression;
terminator nonempty DeviceStatement ";";

InputExpression. InputOutputExpression ::= "input" "=" PortExperssion;
OutputExpression. InputOutputExpression ::= "output" "=" PortExperssion;

DeviceExpression. DeviceExpression ::= LHS "=" RHS;

rules LHS ::= FunctionExpression | Variable;
RHS. RHS ::= Expression;

FunctionExpression. FunctionExpression ::= FunctionName "(" Variable ")";
rules Expression ::= Expression "+" Expression
                           | Expression "-" Expression 
                           | Expression "/" Expression 
                           | Expression "*" Expression 
                           ;
-- Instance
InstanceName. InstanceName ::= Ident;

rules Rvalue ::= Double | Ident | Integer; 

-- Ports 
PortExperssion. PortExperssion ::= Expression;

-- Variable
Variable. Variable ::= Ident;

-- Function name 
FunctionName. FunctionName ::= Ident;

-- comments 
comment "//";
comment "/*" "*/";

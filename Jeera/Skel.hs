module Jeera.Skel where

-- Haskell module generated by the BNF converter

import Jeera.Abs
import Jeera.ErrM
type Result = Err String

failure :: Show a => a -> Result
failure x = Bad $ "Undefined case: " ++ show x

transIdent :: Ident -> Result
transIdent x = case x of
  Ident str  -> failure x


transProgram :: Program -> Result
transProgram x = case x of
  Program statements  -> failure x


transStatement :: Statement -> Result
transStatement x = case x of
  DeviceDecl devicedecl  -> failure x


transDeviceDecl :: DeviceDecl -> Result
transDeviceDecl x = case x of
  SimpleDevice instancename simpledevicetype devicestatements  -> failure x
  TwoPortDevice instancename devicestatements  -> failure x


transSimpleDeviceType :: SimpleDeviceType -> Result
transSimpleDeviceType x = case x of
  Resistor  -> failure x
  Inductor  -> failure x
  Capacitor  -> failure x


transDeviceStatement :: DeviceStatement -> Result
transDeviceStatement x = case x of
  DeviceStatement lhsexpression rhsexpression  -> failure x


transLHSExpression :: LHSExpression -> Result
transLHSExpression x = case x of
  LHSExpressionValueExpression valueexpression  -> failure x
  LHSExpressionFunctionExpression functionexpression  -> failure x
  LHSExpressionInOutPortVariable inoutportvariable  -> failure x
  LHSExpressionIdent id  -> failure x


transFunctionExpression :: FunctionExpression -> Result
transFunctionExpression x = case x of
  FunctionExpression id1 id2  -> failure x


transValueExpression :: ValueExpression -> Result
transValueExpression x = case x of
  ValueExpression  -> failure x


transInOutPortVariable :: InOutPortVariable -> Result
transInOutPortVariable x = case x of
  InputVariable  -> failure x
  OutputVariable  -> failure x


transRHSExpression :: RHSExpression -> Result
transRHSExpression x = case x of
  RHSExpressionSimpleExpression simpleexpression  -> failure x
  RHSExpressionFunctionExpression functionexpression  -> failure x
  RHSExpressionMathExpression mathexpression  -> failure x
  RHSExpressionExpression expression  -> failure x


transSimpleExpression :: SimpleExpression -> Result
transSimpleExpression x = case x of
  ExpressionDouble d  -> failure x
  ExpressionInteger n  -> failure x


transExpression :: Expression -> Result
transExpression x = case x of
  PortExpr portexpression  -> failure x
  MathExpr mathexpression  -> failure x
  NumericExpr numericexpression  -> failure x


transNumericExpression :: NumericExpression -> Result
transNumericExpression x = case x of
  NumericExpressionInteger n  -> failure x
  NumericExpressionDouble d  -> failure x


transPortExpression :: PortExpression -> Result
transPortExpression x = case x of
  PortExpression portname1 portname2  -> failure x


transMathExpression :: MathExpression -> Result
transMathExpression x = case x of
  MathExpression_1 rhsexpression1 rhsexpression2  -> failure x
  MathExpression_2 rhsexpression1 rhsexpression2  -> failure x
  MathExpression_3 rhsexpression1 rhsexpression2  -> failure x
  MathExpression_4 rhsexpression1 rhsexpression2  -> failure x
  MathExpression_5 mathexpression  -> failure x
  MathExpressionIdent id  -> failure x


transInstanceName :: InstanceName -> Result
transInstanceName x = case x of
  InstanceName id  -> failure x


transPortName :: PortName -> Result
transPortName x = case x of
  PortNameIdent id  -> failure x
  PortNameInteger n  -> failure x




module Jeera.Skel where

-- Haskell module generated by the BNF converter

import Jeera.Abs
import Jeera.ErrM
type Result = Err String

failure :: Show a => a -> Result
failure x = Bad $ "Undefined case: " ++ show x

transIdent :: Ident -> Result
transIdent x = case x of
  Ident str  -> failure x


transProgram :: Program -> Result
transProgram x = case x of
  Program statements  -> failure x


transStatement :: Statement -> Result
transStatement x = case x of
  DeviceDecl devicedecl  -> failure x


transDeviceDecl :: DeviceDecl -> Result
transDeviceDecl x = case x of
  Device instancename devicetype devicestatements  -> failure x


transDeviceType :: DeviceType -> Result
transDeviceType x = case x of
  Resistor  -> failure x
  Inductor  -> failure x
  Capacitor  -> failure x
  VSource  -> failure x
  ISource  -> failure x
  GenericDevice  -> failure x


transDeviceStatement :: DeviceStatement -> Result
transDeviceStatement x = case x of
  PortDeclaration portdirection portnames  -> failure x
  ValueExpr rhsdeviceexpr  -> failure x
  ParameterAssignmentExpr parametername rhsdeviceexpr  -> failure x
  InitialConditionExpr parametername rhsdeviceexpr  -> failure x
  PortRelation functiononport portname rhsdeviceexpr  -> failure x


transPortRelationExpr :: PortRelationExpr -> Result
transPortRelationExpr x = case x of
  PortRelationExpr functiononport portname  -> failure x


transPortDirection :: PortDirection -> Result
transPortDirection x = case x of
  InputPort  -> failure x
  OutputPort  -> failure x


transFunctionOnPort :: FunctionOnPort -> Result
transFunctionOnPort x = case x of
  FunctionOnPort_V  -> failure x
  FunctionOnPort_I  -> failure x


transParameterName :: ParameterName -> Result
transParameterName x = case x of
  ParameterName id  -> failure x


transRHSDeviceExpr :: RHSDeviceExpr -> Result
transRHSDeviceExpr x = case x of
  RHSDeviceExprSimpleExpr simpleexpr  -> failure x
  RHSDeviceExprPortRelationExpr portrelationexpr  -> failure x
  RHSDeviceExprMathExpr mathexpr  -> failure x
  RHSDeviceExprExpr expr  -> failure x


transSimpleExpr :: SimpleExpr -> Result
transSimpleExpr x = case x of
  ExprDouble d  -> failure x
  ExprInteger n  -> failure x


transExpr :: Expr -> Result
transExpr x = case x of
  MathExpr mathexpr  -> failure x
  NumericExpr numericexpr  -> failure x


transNumericExpr :: NumericExpr -> Result
transNumericExpr x = case x of
  NumericExprInteger n  -> failure x
  NumericExprDouble d  -> failure x


transPortExpr :: PortExpr -> Result
transPortExpr x = case x of
  PortExpr portname1 portname2  -> failure x


transMathExpr :: MathExpr -> Result
transMathExpr x = case x of
  MathExpr_1 rhsdeviceexpr1 rhsdeviceexpr2  -> failure x
  MathExpr_2 rhsdeviceexpr1 rhsdeviceexpr2  -> failure x
  MathExpr_3 rhsdeviceexpr1 rhsdeviceexpr2  -> failure x
  MathExpr_4 rhsdeviceexpr1 rhsdeviceexpr2  -> failure x
  MathExpr_5 mathexpr  -> failure x
  MathExprIdent id  -> failure x


transInstanceName :: InstanceName -> Result
transInstanceName x = case x of
  InstanceName id  -> failure x


transPortName :: PortName -> Result
transPortName x = case x of
  PortNameIdent id  -> failure x
  PortNameInteger n  -> failure x




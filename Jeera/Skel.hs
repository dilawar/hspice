module Jeera.Skel where

-- Haskell module generated by the BNF converter

import Jeera.Abs
import Jeera.ErrM
type Result = Err String

failure :: Show a => a -> Result
failure x = Bad $ "Undefined case: " ++ show x

transIdent :: Ident -> Result
transIdent x = case x of
  Ident str  -> failure x


transProgram :: Program -> Result
transProgram x = case x of
  Program statements  -> failure x


transStatement :: Statement -> Result
transStatement x = case x of
  DeviceDecl devicedecl  -> failure x


transDeviceDecl :: DeviceDecl -> Result
transDeviceDecl x = case x of
  SimpleDevice instancename simpledevicetype devicestatements  -> failure x


transSimpleDeviceType :: SimpleDeviceType -> Result
transSimpleDeviceType x = case x of
  Resistor  -> failure x
  Inductor  -> failure x
  Capacitor  -> failure x


transDeviceStatement :: DeviceStatement -> Result
transDeviceStatement x = case x of
  DeviceStatement lhsexpression rhsexpression  -> failure x


transLHSExpression :: LHSExpression -> Result
transLHSExpression x = case x of
  LHSExpression_value  -> failure x
  LHSExpressionIdent id  -> failure x


transRHSExpression :: RHSExpression -> Result
transRHSExpression x = case x of
  RHSExpressionSimpleExpression simpleexpression  -> failure x
  RHSExpressionExpression expression  -> failure x


transSimpleExpression :: SimpleExpression -> Result
transSimpleExpression x = case x of
  ExpressionDouble d  -> failure x
  ExpressionInteger n  -> failure x


transExpression :: Expression -> Result
transExpression x = case x of
  PortExpr portexpression  -> failure x
  MathExpr mathexpression  -> failure x


transPortExpression :: PortExpression -> Result
transPortExpression x = case x of
  PortExpression id1 id2  -> failure x


transMathExpression :: MathExpression -> Result
transMathExpression x = case x of
  MathExpression_1 expression1 expression2  -> failure x
  MathExpression_2 expression1 expression2  -> failure x
  MathExpression_3 expression1 expression2  -> failure x
  MathExpression_4 expression1 expression2  -> failure x
  MathExpression_5 mathexpression  -> failure x
  MathExpressionIdent id  -> failure x


transInstanceName :: InstanceName -> Result
transInstanceName x = case x of
  InstanceName id  -> failure x




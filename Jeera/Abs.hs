module Jeera.Abs where

-- Haskell module generated by the BNF converter


newtype Ident = Ident String deriving (Eq,Ord,Show)
data Design =
   Design [DesignStatement]
  deriving (Eq,Ord,Show)

data DesignStatement =
   DesignStatement DeviceDecl
  deriving (Eq,Ord,Show)

data DeviceDecl =
   SimpleDevice InstanceName SimpleDeviceExpr
 | TwoPortDevice InstanceName TwoPortDeviceExpr
  deriving (Eq,Ord,Show)

data SimpleDeviceExpr =
   SimpleDeviceExpr DeviceType [DeviceStatement]
  deriving (Eq,Ord,Show)

data DeviceType =
   DeviceType_Resistor
 | DeviceType_Capacitor
 | DeviceType_Inductance
 | DeviceType_Voltage
  deriving (Eq,Ord,Show)

data TwoPortDeviceExpr =
   TwoPortDeviceExpr [DeviceStatement]
  deriving (Eq,Ord,Show)

data DeviceStatement =
   DeviceStatementInputOutputExpression InputOutputExpression
 | DeviceStatementDeviceExpression DeviceExpression
  deriving (Eq,Ord,Show)

data InputOutputExpression =
   InputExpression PortExperssion
 | OutputExpression PortExperssion
  deriving (Eq,Ord,Show)

data DeviceExpression =
   DeviceExpression LHS RHS
  deriving (Eq,Ord,Show)

data LHS =
   LHSFunctionExpression FunctionExpression
 | LHSVariable Variable
  deriving (Eq,Ord,Show)

data RHS =
   RHS Expression
  deriving (Eq,Ord,Show)

data FunctionExpression =
   FunctionExpression FunctionName Variable
  deriving (Eq,Ord,Show)

data Expression =
   Expression_1 Expression Expression
 | Expression_2 Expression Expression
 | Expression_3 Expression Expression
 | Expression_4 Expression Expression
  deriving (Eq,Ord,Show)

data InstanceName =
   InstanceName Ident
  deriving (Eq,Ord,Show)

data Rvalue =
   RvalueDouble Double
 | RvalueIdent Ident
 | RvalueInteger Integer
  deriving (Eq,Ord,Show)

data PortExperssion =
   PortExperssion Expression
  deriving (Eq,Ord,Show)

data Variable =
   Variable Ident
  deriving (Eq,Ord,Show)

data FunctionName =
   FunctionName Ident
  deriving (Eq,Ord,Show)


-- This Happy file was machine-generated by the BNF converter
{
{-# OPTIONS_GHC -fno-warn-incomplete-patterns -fno-warn-overlapping-patterns #-}
module Jeera.Par where
import Jeera.Abs
import Jeera.Lex
import Jeera.ErrM

}

%name pProgram Program

-- no lexer declaration
%monad { Err } { thenM } { returnM }
%tokentype { Token }

%token 
 '(' { PT _ (TS _ 1) }
 ')' { PT _ (TS _ 2) }
 '*' { PT _ (TS _ 3) }
 '+' { PT _ (TS _ 4) }
 ',' { PT _ (TS _ 5) }
 '-' { PT _ (TS _ 6) }
 '/' { PT _ (TS _ 7) }
 ';' { PT _ (TS _ 8) }
 '=' { PT _ (TS _ 9) }
 'Capacitor' { PT _ (TS _ 10) }
 'Device' { PT _ (TS _ 11) }
 'I' { PT _ (TS _ 12) }
 'ISource' { PT _ (TS _ 13) }
 'Inductor' { PT _ (TS _ 14) }
 'Resistor' { PT _ (TS _ 15) }
 'V' { PT _ (TS _ 16) }
 'VSource' { PT _ (TS _ 17) }
 'in' { PT _ (TS _ 18) }
 'init' { PT _ (TS _ 19) }
 'out' { PT _ (TS _ 20) }
 'param' { PT _ (TS _ 21) }
 'value' { PT _ (TS _ 22) }
 '{' { PT _ (TS _ 23) }
 '}' { PT _ (TS _ 24) }

L_ident  { PT _ (TV $$) }
L_doubl  { PT _ (TD $$) }
L_integ  { PT _ (TI $$) }
L_err    { _ }


%%

Ident   :: { Ident }   : L_ident  { Ident $1 }
Double  :: { Double }  : L_doubl  { (read ( $1)) :: Double }
Integer :: { Integer } : L_integ  { (read ( $1)) :: Integer }

Program :: { Program }
Program : ListStatement { Program $1 } 


ListStatement :: { [Statement] }
ListStatement : Statement ';' { (:[]) $1 } 
  | Statement ';' ListStatement { (:) $1 $3 }


Statement :: { Statement }
Statement : DeviceDecl { DeviceDecl $1 } 


DeviceDecl :: { DeviceDecl }
DeviceDecl : InstanceName '=' DeviceType '{' ListDeviceStatement '}' { Device $1 $3 $5 } 


DeviceType :: { DeviceType }
DeviceType : 'Resistor' { Resistor } 
  | 'Inductor' { Inductor }
  | 'Capacitor' { Capacitor }
  | 'VSource' { VSource }
  | 'ISource' { ISource }
  | 'Device' { GenericDevice }


DeviceStatement :: { DeviceStatement }
DeviceStatement : PortDirection ListPortName { PortDeclaration $1 $2 } 
  | 'value' '=' RHSDeviceExpr { ValueExpr $3 }
  | 'param' ParameterName '=' RHSDeviceExpr { ParameterAssignmentExpr $2 $4 }
  | 'init' ParameterName '=' RHSDeviceExpr { InitialConditionExpr $2 $4 }
  | FunctionOnPort '(' PortName ')' '=' RHSDeviceExpr { PortRelation $1 $3 $6 }


ListDeviceStatement :: { [DeviceStatement] }
ListDeviceStatement : DeviceStatement ';' { (:[]) $1 } 
  | DeviceStatement ';' ListDeviceStatement { (:) $1 $3 }


PortRelationExpr :: { PortRelationExpr }
PortRelationExpr : FunctionOnPort '(' PortName ')' { PortRelationExpr $1 $3 } 


PortDirection :: { PortDirection }
PortDirection : 'in' { InputPort } 
  | 'out' { OutputPort }


FunctionOnPort :: { FunctionOnPort }
FunctionOnPort : 'V' { FunctionOnPort_V } 
  | 'I' { FunctionOnPort_I }


ParameterName :: { ParameterName }
ParameterName : Ident { ParameterName $1 } 


RHSDeviceExpr :: { RHSDeviceExpr }
RHSDeviceExpr : SimpleExpr { RHSDeviceExprSimpleExpr $1 } 
  | PortRelationExpr { RHSDeviceExprPortRelationExpr $1 }
  | MathExpr { RHSDeviceExprMathExpr $1 }
  | Expr { RHSDeviceExprExpr $1 }


SimpleExpr :: { SimpleExpr }
SimpleExpr : Double { ExprDouble $1 } 
  | Integer { ExprInteger $1 }


Expr :: { Expr }
Expr : MathExpr { MathExpr $1 } 
  | NumericExpr { NumericExpr $1 }


NumericExpr :: { NumericExpr }
NumericExpr : Integer { NumericExprInteger $1 } 
  | Double { NumericExprDouble $1 }


MathExpr :: { MathExpr }
MathExpr : RHSDeviceExpr '*' RHSDeviceExpr { MathExpr_1 $1 $3 } 
  | RHSDeviceExpr '+' RHSDeviceExpr { MathExpr_2 $1 $3 }
  | RHSDeviceExpr '/' RHSDeviceExpr { MathExpr_3 $1 $3 }
  | RHSDeviceExpr '-' RHSDeviceExpr { MathExpr_4 $1 $3 }
  | '(' MathExpr ')' { MathExpr_5 $2 }
  | Ident { MathExprIdent $1 }


InstanceName :: { InstanceName }
InstanceName : Ident { InstanceName $1 } 


PortName :: { PortName }
PortName : Ident { PortNameIdent $1 } 
  | Integer { PortNameInteger $1 }


ListPortName :: { [PortName] }
ListPortName : PortName { (:[]) $1 } 
  | PortName ',' ListPortName { (:) $1 $3 }



{

returnM :: a -> Err a
returnM = return

thenM :: Err a -> (a -> Err b) -> Err b
thenM = (>>=)

happyError :: [Token] -> Err a
happyError ts =
  Bad $ "syntax error at " ++ tokenPos ts ++ 
  case ts of
    [] -> []
    [Err _] -> " due to lexer error"
    _ -> " before " ++ unwords (map (id . prToken) (take 4 ts))

myLexer = tokens
}

